name: Build and Push Dist

on:
  push:
    branches:
      - main

jobs:  
  build-and-commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm run build

      - name: Setup git config
        uses: ./.github/actions/git-user

      - name: Check for changes
        id: git-check
        run: |
          if git status | grep -q modified
          then
            echo 'Changes found; hasModifications true' && echo "hasModifications=true" >> "$GITHUB_OUTPUT"
          else
            echo 'No changes found; hasModifications false' && echo "hasModifications=false"  >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout new branch
        if: steps.git-check.outputs.hasModifications == 'true'
        run: git checkout -b update-dist-${{ github.run_id }}
    
      - name: Commit dist folder
        if: steps.git-check.outputs.hasModifications == 'true'
        run: |
          git add dist
          git commit -m "chore: update dist folder with latest build changes"
          git push --set-upstream origin update-dist-${{ github.run_id }}          
        
      - name: Create pull request for dist changes
        if: steps.git-check.outputs.hasModifications == 'true'
        run: gh pr create --base main --head update-dist-${{ github.run_id }} --title "Update dist folder" --body "This PR updates the dist folder with the latest build changes."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge pull request for dist changes
        if: steps.git-check.outputs.hasModifications == 'true'
        run: gh pr merge --auto --squash --delete-branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout main branch
        if: steps.git-check.outputs.hasModifications == 'true'
        run: git checkout main

      - name: Wait for pr checks to complete
        if: steps.git-check.outputs.hasModifications == 'true'
        run: gh pr checks --watch update-dist-${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Wait for dist automerge to complete
      #   if: steps.git-check.outputs.hasModifications == 'true'
      #   run: |
      #     BRANCH="update-dist-${{ github.run_id }}"
      #     MAX_RETRIES=30
      #     SLEEP_SECONDS=10
          
      #     for ((i=1; i<=MAX_RETRIES; i++)); do
      #       pr_info=$(gh pr list --head "$BRANCH" --state all --limit 1 --json number,state,mergedAt --jq '.[0]')
      #       pr_number=$(echo "$pr_info" | jq -r '.number')
      #       pr_state=$(echo "$pr_info" | jq -r '.state')
      #       merged_at=$(echo "$pr_info" | jq -r '.mergedAt')

      #       if [ "$pr_number" = "null" ]; then
      #         echo "No pull request found for branch $BRANCH (attempt $i/$MAX_RETRIES)"
      #       elif [ "$pr_state" = "OPEN" ]; then
      #         echo "PR #$pr_number is still open (attempt $i/$MAX_RETRIES). Waiting..."
      #       else
      #         if [ "$merged_at" != "null" ]; then
      #           echo "PR #$pr_number is merged."
      #           exit 0
      #         else
      #           echo "PR #$pr_number is closed but not merged."
      #           exit 1
      #         fi
      #       fi

      #       if [ $i -lt $MAX_RETRIES ]; then
      #         sleep $SLEEP_SECONDS
      #       else
      #         echo "Max retries reached. Exiting."
      #         exit 1
      #       fi
      #     done
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}